{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","fileName","setFileName","file","setFile","previewUrl","setPreviewUrl","filePickerRef","useRef","Container","styled","div","ButtonContainer","Button","button","FileName","p","ImageContainer","PreviewImage","img","useEffect","fileReader","FileReader","onload","result","readAsDataURL","onClick","current","click","type","style","display","ref","onChange","event","pickedFile","target","files","length","name","console","log","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ozCAKA,IA6FeA,EA7FH,WAAO,IAAD,EACgBC,qBADhB,mBACTC,EADS,KACCC,EADD,OAEQF,qBAFR,mBAETG,EAFS,KAEHC,EAFG,OAGoBJ,qBAHpB,mBAGTK,EAHS,KAGGC,EAHH,KAIVC,EAAgBC,mBAEhBC,EAAYC,IAAOC,IAAV,KASTC,EAAkBF,IAAOC,IAAV,KAQfE,EAASH,IAAOI,OAAV,KASNC,EAAWL,IAAOM,EAAV,KAIRC,EAAiBP,IAAOC,IAAV,KAMdO,EAAeR,IAAOS,IAAV,KAQlBC,qBAAU,WACR,GAAKjB,EAAL,CAGA,IAAMkB,EAAa,IAAIC,WACvBD,EAAWE,OAAS,WAClBjB,EAAce,EAAWG,SAE3BH,EAAWI,cAActB,MACxB,CAACA,IAeJ,OACE,eAACM,EAAD,WACE,cAACG,EAAD,UACE,cAACC,EAAD,CAAQa,QANW,WACvBnB,EAAcoB,QAAQC,SAKlB,wCAEF,uBACEC,KAAK,OACLC,MAAO,CAAEC,QAAS,QAClBC,IAAKzB,EACL0B,SAtBc,SAACC,GACnB,IAAIC,EACAD,EAAME,OAAOC,OAAuC,IAA9BH,EAAME,OAAOC,MAAMC,SAC3CH,EAAaD,EAAME,OAAOC,MAAM,GAChCjC,EAAQ+B,GACRjC,EAAYiC,EAAWI,OAEzBC,QAAQC,IAAIlC,MAiBV,cAACQ,EAAD,kDAAmBd,GAAY,0CAC/B,cAACgB,EAAD,UACE,cAACC,EAAD,CAAcwB,IAAKrC,UChFZsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d037bba1.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [fileName, setFileName] = useState();\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const filePickerRef = useRef();\n\n  const Container = styled.div`\n    width: 100vw;\n    padding: 16px;\n    border: solid 1px #9b9b9b;\n    border-radius: 5px;\n    @media (min-width: 768px) {\n      width: 90vw;\n    }\n  `;\n  const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    @media (min-width: 768px) {\n      justify-content: flex-start;\n    }\n  `;\n\n  const Button = styled.button`\n    background-color: #4a4a4a;\n    color: white;\n    border-radius: 5px;\n    padding: 0.5rem 0.8rem;\n    font-size: 24px;\n    cursor: pointer;\n  `;\n\n  const FileName = styled.p`\n    font-size: 24px;\n  `;\n\n  const ImageContainer = styled.div`\n    width: 100%;\n    border: solid 1px #9b9b9b;\n    border-radius: 5px;\n  `;\n\n  const PreviewImage = styled.img`\n    width: 100%;\n    padding: 5rem 0;\n    @media (min-width: 768px) {\n      padding: 0 5rem;\n    }\n  `;\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const fileHandler = (event) => {\n    let pickedFile;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setFileName(pickedFile.name);\n    }\n    console.log(filePickerRef);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <Container>\n      <ButtonContainer>\n        <Button onClick={pickImageHandler}>上傳照片</Button>\n      </ButtonContainer>\n      <input\n        type=\"file\"\n        style={{ display: \"none\" }}\n        ref={filePickerRef}\n        onChange={fileHandler}\n      />\n      <FileName>{`檔案名稱：${fileName || \"尚未選擇檔案\"}`}</FileName>\n      <ImageContainer>\n        <PreviewImage src={previewUrl} />\n      </ImageContainer>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}